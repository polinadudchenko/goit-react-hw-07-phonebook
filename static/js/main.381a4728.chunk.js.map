{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Contact/Contact.module.css","App.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","services/contact-api.js","redux/contacts/contact-operations.js","redux/contacts/contact-actions.js","redux/contacts/contact-selectors.js","redux/contacts/contact-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/Contact/Contact.js","components/ContactList/ContactList.container.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Section/Section.js","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","fetchContacts","a","axios","get","data","addContact","contact","post","deleteContactById","contactId","delete","defaults","baseURL","createAsyncThunk","_","rejectWithValue","contactsApi","contacts","contactToAdd","deleteContact","filterContacts","createAction","getContacts","state","items","getIsLoading","isLoading","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","trim","name","includes","createReducer","fulfilled","payload","id","pending","rejected","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","connect","contactsSelectors","dispatch","onSubmit","contactsOperations","useState","setName","number","setNumber","handleChange","e","target","value","Error","reset","className","s","contact_form","preventDefault","find","toast","info","contact_form__label","type","contact_form__input","onChange","pattern","title","required","contact_form__button","Contact","deleteBtn","contact_line","contact_btn","onClick","onDeleteContact","color","height","width","timeout","style","textAlign","padding","length","contact__info","contact_list","contact_list__head","contact_list__head_line","contact_list__head_column","contact_list__body","map","contact_list__body_line","onHandleFilter","contactsActions","currentTarget","filter_form__label","filter_form__input","Section","children","section","section_title","defaultPropTypes","useEffect","App","App_title","App_content","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.381a4728.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"ContactForm_contact_form__2UkvT\",\"contact_form__label\":\"ContactForm_contact_form__label__1ENKD\",\"contact_form__input\":\"ContactForm_contact_form__input__1jkq_\",\"contact_form__button\":\"ContactForm_contact_form__button__1m20Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_line\":\"Contact_contact_line__3rrxC\",\"contact_btn\":\"Contact_contact_btn__3o3AJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2dbrw\",\"App_title\":\"App_App_title__2KyxJ\",\"App_content\":\"App_App_content__vLwTV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_form__label\":\"Filter_filter_form__label__3-icW\",\"filter_form__input\":\"Filter_filter_form__input__2ayhj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2VOiz\",\"section_title\":\"Section_section_title__35MaL\"};","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://61d194c4da87830017e5929c.mockapi.io'\r\n\r\nexport async function fetchContacts() {\r\n  const { data } = await axios.get('/contacts');\r\n  return data;\r\n}\r\n\r\nexport async function addContact(contact) {\r\n  const { data } = await axios.post('/contacts', contact);\r\n  return data;\r\n}\r\n\r\nexport async function deleteContactById(contactId) {\r\n  await axios.delete(`/contacts/${contactId}`);\r\n}","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport * as contactsApi from 'services/contact-api'\r\n\r\nconst fetchContacts = createAsyncThunk('contacts/fetchContacts',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const contacts = await contactsApi.fetchContacts();\r\n      return contacts;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  },)\r\n\r\nconst addContact = createAsyncThunk('contacts/addContact',\r\n    async (contact) => {\r\n      const contactToAdd = await contactsApi.addContact(contact);\r\n      return contactToAdd;\r\n  },)\r\n\r\nconst deleteContact = createAsyncThunk('contacts/deleteContact',\r\n    async (contactId) => {\r\n        await contactsApi.deleteContactById(contactId);\r\n      return contactId;\r\n  },)\r\n\r\nexport {fetchContacts, addContact, deleteContact}","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const filterContacts = createAction('contacts/filter');","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getIsLoading = state => state.contacts.isLoading;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\n\r\nexport const getVisibleContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\r\n     const normalizedFilter = filter.toLowerCase().trim();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n})","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {filterContacts} from './contact-actions'\r\nimport { addContact, deleteContact, fetchContacts } from './contact-operations';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, {payload}) => payload,\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [deleteContact.fulfilled]: (state, { payload }) => state.filter(({id}) => id !== payload)\r\n})\r\n\r\nconst isLoading = createReducer(false, {\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n\r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n  \r\n})\r\n\r\nconst filter = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => payload\r\n})\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  isLoading,\r\n  error\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport {contactsReducer} from './contacts'\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport { store };","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts'\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from 'prop-types'\r\nimport s from './ContactForm.module.css'\r\n\r\nfunction ContactForm({contacts, onSubmit}){\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        switch (name) {\r\n            case ('name'):\r\n                setName(value);\r\n                break;\r\n            case ('number'):\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n  \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (contacts.find(contact => (contact.name.toLowerCase() === name.toLowerCase()) || (contact.number.toLowerCase() === number.toLowerCase()))) {\r\n            return toast.info('This contact already in the addressbook')\r\n        }\r\n        const contact = {name, number}\r\n        onSubmit(contact);\r\n        reset();\r\n    }\r\n    \r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    \r\n    return (<form className={s.contact_form} onSubmit={handleSubmit}>\r\n            <label className={s.contact_form__label}> Name\r\n                <input\r\n                    type=\"text\"                \r\n                    className={s.contact_form__input}\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </label>\r\n            <label className={s.contact_form__label}> Telephone number\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    value={number}\r\n                    className={s.contact_form__input}\r\n                    onChange={handleChange}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                />\r\n            </label>\r\n            <button type=\"submit\" className={s.contact_form__button} >\r\n            Add to contacts\r\n            </button>\r\n        </form> )\r\n}\r\n\r\nContactForm.propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchtoProps = dispatch => ({\r\n    onSubmit: (contact) => {\r\n        dispatch(contactsOperations.addContact(contact))\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchtoProps)(ContactForm)","import PropTypes from 'prop-types'\r\nimport s from './Contact.module.css'\r\n\r\nexport default function Contact({deleteBtn, name, number}) {\r\n        return <>\r\n            <td className={s.contact_line}>{ name }</td>\r\n            <td className={s.contact_line}>{number}</td>\r\n            <td className={s.contact_line}><button className={s.contact_btn} onClick={ deleteBtn }>Delete</button></td>\r\n            </>                    \r\n}\r\n\r\nContact.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n}\r\n","\r\nimport { connect } from 'react-redux';\r\nimport ContactList  from './ContactList';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts'\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n  isLoading: contactsSelectors.getIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport Contact from '../Contact';\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport default function ContactList({ contacts, isLoading, onDeleteContact }) {\r\n  return (isLoading\r\n    ? <Loader\r\n        type=\"Puff\"\r\n        color=\"#414141\"\r\n        height={100}\r\n        width={100}\r\n      timeout={3000} \r\n      style={{ textAlign: 'center', padding: '100px' }}\r\n    />\r\n    :(contacts.length === 0)\r\n    ? <p className={s.contact__info}>No matches found</p>\r\n    : <table className={s.contact_list} >\r\n    <thead className={s.contact_list__head}>\r\n      <tr className={s.contact_list__head_line}>\r\n        <th className={s.contact_list__head_column}>Name</th>\r\n        <th className={s.contact_list__head_column}>Number</th>\r\n        <th className={s.contact_list__head_column}>Edit</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody className={s.contact_list__body}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <tr key={id} className={s.contact_list__body_line}>\r\n          <Contact name={name} number={number} deleteBtn={() => onDeleteContact(id)} />\r\n        </tr>)\r\n      )}\r\n    </tbody>\r\n  </table>)\r\n}\r\n\r\nContactList.propTypes = {\r\n        contacts: PropTypes.arrayOf(PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        })),\r\n        onDeleteContact: PropTypes.func.isRequired,\r\n}\r\n    ","import PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { contactsActions, contactsSelectors } from 'redux/contacts'\r\nimport s from './Filter.module.css'\r\n\r\nfunction Filter({ filter, onHandleFilter }) {\r\n    \r\n    return <label className={s.filter_form__label}> Find a contact\r\n                <input\r\n                    type=\"text\"                \r\n                    className={s.filter_form__input}\r\n                    name=\"filter\"\r\n                    value={filter}\r\n                    onChange={onHandleFilter}\r\n                />\r\n            </label>\r\n}\r\n\r\nFilter.propTypes = {\r\n       onHandleFilter: PropTypes.func.isRequired,\r\n}\r\n    \r\nconst mapStateToProps = state => ({\r\n    filter: contactsSelectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchtoProps = dispatch => ({\r\n    onHandleFilter: e => dispatch(contactsActions.filterContacts(e.currentTarget.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchtoProps)(Filter)","import PropTypes from 'prop-types'\r\nimport s from './Section.module.css'\r\n\r\nexport default function Section({ title, children }) {\r\n    return <section className={s.section}>\r\n        <h2 className={s.section_title}> {title}</h2>\r\n        {children}\r\n        </section>\r\n}\r\n\r\nSection.defaultPropTypes = {\r\n    title: '',\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node.isRequired,\r\n}","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport s from './App.module.css';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter'\nimport Section from './components/Section'\nimport {contactsOperations, contactsSelectors} from 'redux/contacts'\n\n\nfunction App({ contacts, fetchContacts }) {\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts])\n\n  return (\n      <div className={s.App}>\n        <h1 className={s.App_title}>Phonebook</h1>\n        <div className={s.App_content}>\n        <Section title=\"Create a new Contact\">\n        <ContactForm/>\n        </Section>\n       \n        <Section title=\"Your contacts\">\n          {contacts.length === 0 ?\n            <p>You don't have any contacts yet, please add one to the form on the left</p>\n            :\n            <>\n            <Filter/>\n            <ContactList /> \n            </>\n          }\n        </Section>\n        <ToastContainer autoClose={3000}/>\n        </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {store} from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__info\":\"ContactList_contact__info__2GTDJ\",\"contact_list\":\"ContactList_contact_list__1ecji\",\"contact_list__head\":\"ContactList_contact_list__head__1TvLZ\",\"contact_list__body\":\"ContactList_contact_list__body__1zU6B\",\"contact_list__body_line\":\"ContactList_contact_list__body_line__3E6pB\"};"],"sourceRoot":""}